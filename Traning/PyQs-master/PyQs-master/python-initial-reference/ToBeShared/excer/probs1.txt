Download from https://github.com/ndas1971/PyQs
python-initial-reference.zip

mail-id: ndas1971@gmail.com 

















-----------------------------
Q0: Nested If 

if name is "XYZ" 
and age is below 40, 
print "suitable" 
else if age is greater
than 50, print "old", 
else print "OK"
For all other names, 
print "not known" 

    















Q0.1: Print prime numbers between 0 to 10


















Q0.2: Print Pythogorus number  below 100
ie (x,y,z) which satisfy z*z == x*x +y*y 













Q0.3:
Given:D1 = {'ok': 1, 'nok': 2}
D2 = {'ok': 2, 'new':3 }
Create below:
# union of keys, #value does not matter
D_UNION = { 'ok': 1, 'nok': 2 , 'new':3  } 
# intersection of keys, #value does not matter
D_INTERSECTION = {'ok': 1}
D1- D2 = {'nok': 2 }
#values are added for same keys
D_MERGE = { 'ok': 3, 'nok': 2 , 'new':3  }

















Q1:
input_str = "Hello world 
print frequency of each alphabets 
H-1
e-1
l-3
and so on for other alphabets  















Q2:Find out the flaw in above program 
How can you solve that ?(Hint: use correct data structure )
Solve ..   
    
    
    
    
    
    
    
    
    
    
    
    
Q3: Actually, above data structure is dict, don't you think so?
So, formally solve with dict where key is aplhabet and value it's count 









Q3.1 
input = "aaabbbbaaac"
output = "abc"



Q4: Given input, find output 
input = [1,2,3,4]
output = [1,9]



      












      
Q5: Given input, find output 
input = '[1,2,3,4]'
output = [1,2,3,4]

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
Q5.1: Can you implement above with slice 



    
    
    
    
    
    
    
    
    
    
    
    
Q6: Given input, find output 
input = 'Name:ABC,age=20|Name:XYZ,age=30'
output = 'Name:Abc,age=20|Name:Xyz,age=30'









Q7: Find checksum 
input="ABCDEF1234567890"

Take two two character(one byte) from above (which are in hex digit )
Convert to int  (Hint: use int function with base)
Sum all and then find mod with 255, that is your checksum 





Q8: Sub process and Regex  hands on 
Execute below command and extract some info 


tracert www.google.com
netstat -an
ipconfig /all
powercfg /lastwake
driverquery -v
nslookup www.google.com 
tasklist -m



Q8.1:  escapiing the pipe by ^, /v means lines other than matching , /c:"" - matching, /r - regex 
#To strip out the top 2 lines pipe the output to findstr /v "Active Proto".
for /f "tokens=2,5" %i  in ('netstat -n -o ^| findstr /v "Active Proto"') do @echo Local Address = %i, PID = %j
#OR 
for /f "tokens=2,5" %i  in ('netstat -n -o ^| findstr /C:"ESTABLISHED"') do @echo Local Address = %i, PID = %j
1. Execute above with big bufsize and get Unique port 
2. get detail of each PID by command: tasklist /fi "pid eq PID" /nh


Q8.2: Get return code of executing: taskkill -im iexplore.exe
      while redirecting both stdout and stderr to devnull 

Q8.2 : Execute via pipe ,  
dir /B | findstr /r /c:"[mp]"

Q8.3: Redirect 
tasklist /fi "imagename eq iexplore.exe"' > test.txt
and then display the content via type test.txt 




Q9 : Os hands on 
1. Create below env vars containing below 
HOST        hostname 
DT          todays date using pattern "%m%d%y%H%M%S" 
SCRIPT      this script name only (without extension)
SCRIPT_PID  this script pid 
OUTDIR      C:/tmp/adm
LOGFIL      $OUTDIR/$SCRIPT.$DT.log (in unix expansion of variable 
2. Then dump in parent and in child these values (Use Subprocess)
3. create a dict of filename and it's size only in given dir(without recursively going into subdirs)
4. Print cwd in python and go to parent dir and again print 
5. Walk each dir & subdirs and create .done file containing today's date and no of file found , file names and each file size 
6. walk each dir and remove .done file 














Q-FUNC:Write functions of below , lst = list of numerics


Mean(lst) =         Sum of lst/length of lst 
Median(lst) =       sort and midddle value or average of two middle  if length is even
sd(lst) =           sqrt of( SUM of square of ( each elemnt - mean)  / length of lst  )

freq(lst) =         returns dict with key as element and value is count 
Mode(lst) =         sort with frequency, highest frequency

merge(in1,in2)      
    in1, in2 are dict, values are added for same keys
    Given:
    D1 = {'ok': 1, 'nok': 2}
    D2 = {'ok': 2, 'new':3 }
    returns  { 'ok': 3, 'nok': 2 , 'new':3  }

checksum(string)  
    Using regex 
    Take two two character(one byte) from above (which are in hex digit )
    Convert to int  (Hint: use int function with base)
    Sum all and then find mod with 255, that is your checksum 
    Test with input="ABCDEF1234567890"
                    
sliding(lst, windowSize, step)
    Take elements from lst with windowSize 
    and step with 'step' 
grouped(lst, n) 
    create each n elements of lst 
    
group_by(lst, key)
    returns a dict of key(element) and values are list of those element of lst which satisfy's key function 
    key is function which takes each element 
    
     
take(lst, n, start=0)
    Takes n element from start 

drop(lst, n, start=0)
    takes all element after droping n from start 
    
agg(in_d, agg_d)
    Aggregation where agg_d is dict of column name and fn(lst), lst is values of in_d for each key  
    eg 
    in_d = { 1:[3,5,7], 0:[2,4,6]}
    agg_d = {'max': max, 'mean': lambda lst: sum(lst)/len(lst) , 'sum': sum }
    
    

read_csv(fileName)
    Return list of rows where each element is converted to int, then float, then str whichever succeeds 
read_csv(filename, dates_index= None, datetime_format=None)
    Extend that with datetime parseing for those indexes given in dates_index 
    if datettime_format is none, use dateutils.parser.parse function to autodetect the format  
write_csv(fileName, lst, headers)
        write headers and then lst to fileName

    
    
execute_and_watchdog(command, TIMEOUT=15, WAIT_FOR_KILL=60, **kwargs)
    Execute the command and keep on polling to check command is completed within TIMEOUT 
    If not, manually kill that and then sleep for WAIT_FOR_KILL
    
OS hands ON 
1.Create below env vars containing below 
HOST        hostname 
DT          todays date using pattern "%m%d%y%H%M%S" 
SCRIPT      this script name only (without extension)
SCRIPT_PID  this script pid 
OUTDIR      C:/tmp/adm
LOGFIL      $OUTDIR/$SCRIPT.$DT.log (in unix expansion of variable 
2. Then write functions to dump environs in parent and in child these values 
3. write mslog with takes any message and dumps that message to LOGFIL and console 
   with below format , message may contain any env var and that should be expanded 
   HOST:DT:message 
4. Given a filename and no of breaks, generate that many files with chunks from original file names 
5. Concatenate many .txt file into one file 
6. Recursively go below a dir and based on filter, dump those files in to  single file 





     
#Recursion 
flatten(lst)        
    Flattens the list 
    ie input = [1,2,3, [1,2,3,[3,4],2]]
    output = [1,2,3,1,2,3,3,4,2]
                    
convert(x)          
    Converts like below 
    input = [[[ '(0,1,2)' , '(3,4,5)'], ['(5,6,7)' , '(9,4,2)']]]
    output = [[[[0,1,2],[3,4,5]],[[5,6,7],[9,4,2]]]]
                    
                    
checksum(string)    
    Implement checksum with recursion 

quicksort(lst)      
    Implement quicksort 
    1. Take pivot as middle value 
    2. Take left list which is smaller tha pivot 
    3. Take right list which is higher than pivot 
    4. return list which is append of quicksort of left, pivot and quicksort of right 
                    
binsearch(value, items, low=0, high=None) 
    Items are sorted 
    1. Get high either given or len of list 
       Get middle pos 
    2. if items's pos is value, return pos 
    3. if pos is length of items or high is same as low or pos is low, return not found 
    4. if items's pos is less than value call binsearch with low=pos+1 and high 
    5. else call binsearch with low and high=pos 
              


              
###Decorators hands ON 
#Trace a function 



###Yield hands on 
#open WindowsUpdate.log, Send all  WARNING one by one 


###More hands on 
#File Hands on 
def filecopy(src, dest):
    """Copy one file to another file 
    src,dest: file name as string
    returns None 
    """
    
def filecompare(file1,file2):
    """Given two files, compare file contents line by line 
    file1,file2 : file name as string 
    returns line number of 2nd file where first difference occurs
    """
def filemerge(one_dir, dest_file, file_filter):
    """Concatenate many files with file_file_filter under one dir into one file
    one_dir : given dir name as str 
    dest_file : file name where to copy 
    file_filter = regex of files to merge 
    returns none """
    
def execute_and_return_code(command):
    """Given command, returns it's exit code"""
    
def execute_and_return_output(command):
    """Given command , returns it's stdout and stderr """

def execute_and_redirect_to_file(command, filename):
    """Given command and file name, redirect stdout and stderr to file"""

def execute_with_pipe(command1, command2):    
    """Given two commands, returns output of 2nd command after piping first command""" 
    
def execute_and_return_pattern_match(command, pattern):
    """execute the command and the find the pattern in that stdout 
    and return result
    Use execute_and_return_output(command) function to implement this 
    """  
    
    
    
    
    
def update_env_var(another_dict):
    """Given another dict of env vars , update to process env vars 
    Note env vars may contain reference to other environment vars in form of $VAR
    so should expand that before updating
    
    Test above function with with below env vars containing below 
    HOST        hostname 
    DT          todays date(use datetime.datetime) using pattern "%m%d%y%H%M%S" 
    SCRIPT      this script name only (without extension)
    SCRIPT_PID  this script pid 
    OUTDIR      C:/tmp/adm
    LOGFILE      $OUTDIR/$SCRIPT.$DT.log (in unix expansion of variable )
    """
    
def dump_env_var(only_keys):
    """returns dict of  env var of element found in 'only_keys'   
    """
    
def dump_env_var_in_child(only_keys):
    """returns dict env var of element found in 'only_keys'
    in child process"""

#recursion
def get_all_files(one_dir):
    """Given a directory one_dir , 
    returns dict of filenames and size including subdirs 
    """
def get_all_files_after(one_dir, after_datetime):
    """Given a directory one_dir , 
    returns list of filenames which are modified or created after_datetime 
    recursively
    after_datetime is in format "YYY-MM-DD"
    """
def create_hashes_of_all_files_under_one_dir(one_dir):
    """ Create a .hashes file inside each dir . this file contains 
    all file names of that dir and hash of each file"""
    def md5(fname):
        import hashlib
        hash_md5 = hashlib.md5()
        with open(fname, "rb") as f:
            for chunk in iter(lambda: f.read(4096), b""):
                hash_md5.update(chunk)
        return hash_md5.hexdigest()
